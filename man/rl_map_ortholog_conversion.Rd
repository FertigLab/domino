% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rl_map_fxns.R
\name{rl_map_ortholog_conversion}
\alias{rl_map_ortholog_conversion}
\title{Receptor-Ligand Map Ortholog Conversion}
\usage{
rl_map_ortholog_conversion(
  rl_map,
  from,
  to,
  use_complexes = FALSE,
  conversion_name = NULL
)
}
\arguments{
\item{rl_map}{data.frame. A receptor-ligand map. Must include columns for "gene_A" and "gene_B" at minimum.}

\item{from}{character. Vector of genes from a reference database that contains the query genes}

\item{to}{character. Vector of gene orthologs from another reference genome to genes in from}

\item{use_complexes}{logical. Whether to consider ligand-receptor interactions for gene conversions. If FALSE, the resulting rl_map will only include interactions of ligands and receptors each encoded by a single gene.}

\item{conversion_name}{character. A string to append to values in the "source" column of the rl_map to keep notes of how ortholog conversion was conducted.}
}
\value{
data.frame
}
\description{
Converts genes in an rl_map to orthologous genes in an alternative reference
genome. Partner names are maintained from the original rl_map passed to this
function. In cases where there are many orthologs to a single reference gene,
a seperate interaction is included for the new rl_map for each possible
ortholog of the query gene. This can lead to interactions involving ligand
and receptor complexes to be expanded to many seperate rows. An option to
disregard interactions involving complexes is provided if users would like to
completely avoid spurious annotations of all gene orthologs participating in
the same protein complex as the converted reference gene.
}
\examples{
test_rl_map <- data.frame(
gene_A = c("HUMA1", "HUMB1", "HUMC1", "HUMD1", "HUMD2", "HUMA1,HUMA2", "HUMB1,HUMA2", "HUMC1,HUMA2", "HUMD1,HUMA2", "HUMD2,HUMA2"),
type_A = rep("R", 10),
name_A = c("HUMA1", "HUMB1", "HUMC1", "HUMD1", "HUMD2", "complexAA", "complexBA", "complexCA", "complexD1A", "complexD2A"),
gene_B = rep("HUME", 10),
type_B = rep("L", 10),
name_B = rep("HUME", 10),
int_pair = c("HUMA1 & HUME", "HUMB1 & HUME", "HUMC1 & HUME", "HUMD1 & HUME", "HUMD2 & HUME", "complexAA & HUME", "complexBA & HUME", "complexCA & HUME", "complexD1A & HUME", "complexD2A & HUME"),
annotation = rep("test", 10),
source = c("simple int, one-one ortho", "simple int, one-many ortho", "simple int, one-none ortho", "simple int, many-one ortho", "simple int, many-one ortho", "complex int, one-one ortho", "complex int, one-many ortho", "complex int, one-none ortho", "complex int, many-one ortho", "complex int, many-one ortho"),
database_name = rep("test", 10)
)
test_from <- c("HUMA1", "HUMA2", "HUMB1", "HUMB1", "HUMC1", "HUMD1", "HUMD2", "HUME")
test_to <- c("Musa1", "Musa2", "Musb1", "Musb2", "", "Musd1", "Musd1", "Muse")

ortho_rl_map <- rl_map_ortholog_conversion(rl_map = test_rl_map, to = test_to, from = test_from, use_complexes = TRUE)
ortho_rl_map_noComplex <- rl_map_ortholog_conversion(rl_map = test_rl_map, to = test_to, from = test_from, use_complexes = FALSE)

}
